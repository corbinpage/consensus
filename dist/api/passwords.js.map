{"version":3,"sources":["../../src/api/passwords.js"],"names":["config","db","id","load","req","callback","models","password","find","where","text","then","_build","read","res","json","apiResult"],"mappings":";;;;;;AAAA;;;;;;kBAEe;AAAA,MAAGA,MAAH,QAAGA,MAAH;AAAA,MAAWC,EAAX,QAAWA,EAAX;AAAA,SAAoB,wCAAS;;AAE1C;AACAC,QAAK,UAHqC;;AAK1C;;;AAGCC,QARyC,gBAQpCC,GARoC,EAQ/BF,EAR+B,EAQ3BG,QAR2B,EAQjB;AACvBJ,SAAGK,MAAH,CAAUC,QAAV,CAAmBC,IAAnB,CAAyB,EAAEC,OAAO,EAACC,MAAMR,EAAP,EAAT,EAAzB,EAAiDS,IAAjD,CAAsD,oBAAY;AAChE,YAAG,CAACJ,QAAJ,EAAc;AACZF,mBAAS,IAAT,EAAeJ,GAAGK,MAAH,CAAUC,QAAV,CAAmBK,MAAnB,CAA0BV,EAA1B,CAAf;AACD,SAFD,MAEO;AACL;AACAG,mBAAS,IAAT,EAAeE,QAAf;AACD;AACF,OAPD;AAQD,KAjByC;;;AAmB1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAM,QAnC0C,uBAmCvBC,GAnCuB,EAmClB;AAAA,UAAjBP,QAAiB,SAAjBA,QAAiB;;AACtBO,UAAIC,IAAJ,CAAUR,SAASS,SAAT,EAAV;AACD;AArCyC,GAAT,CAApB;AAAA,C","file":"passwords.js","sourcesContent":["import resource from 'resource-router-middleware';\n\nexport default ({ config, db }) => resource({\n\n  /** Property name to store preloaded entity on `request`. */\n  id : 'password',\n\n  /** For requests with an `id`, you can auto-load the entity.\n   *  Errors terminate the request, success sets `req[id] = data`.\n   */\n   load(req, id, callback) {\n    db.models.password.find( { where: {text: id} } ).then(password => {\n      if(!password) {\n        callback(null, db.models.password._build(id) );\n      } else {\n        // let err = password ? null : 'Not found';\n        callback(null, password);          \n      }\n    })\n  },\n\n  /** GET / - List all entities */\n  // index({ params }, res) {\n  //   db.models.password.findAll().then(function(passwords) {\n  //     console.log(passwords);\n  //     res.json(passwords);\n  //   })\n  // },\n\n  /** POST / - Create a new entity */\n  // create({ body }, res) {\n  //   body.id = db.models.password.length.toString(36);\n  //   db.models.password.push(body);\n  //   res.json(body);\n  // },\n\n  /** GET /:id - Return a given entity */\n  read({ password }, res) {\n    res.json( password.apiResult() )  \n  },\n\n  /** PUT /:id - Update a given entity */\n  // update({ password, body }, res) {\n  //   for (let key in body) {\n  //     if (key!=='id') {\n  //       password[key] = body[key];\n  //     }\n  //   }\n  //   res.sendStatus(204);\n  // },\n\n  /** DELETE /:id - Delete a given entity */\n  // delete({ password }, res) {\n  //   db.models.password.splice(db.models.password.indexOf(password), 1);\n  //   res.sendStatus(204);\n  // }\n});\n"]}